"local OrigRequireName, udMeta, udAnch = ...\n"
"\n"
"local guidLPLS_AnonFunc = \"{5D623233-426C-4983-9779-0E7EEC23541E}\"\n"
"local guidUpvalues      = \"{F56CF593-BBB6-4f54-8320-9B0942A85506}\"\n"
"local guidUDAnchors     = \"{E98ACFD3-7ECF-45f6-B82B-8FB1F58EB601}\"\n"
"local guidUDSizes       = \"{B7623232-CD2A-4122-898C-AB6E67678908}\"\n"
"local guidUDEnvs        = \"{B4632E5C-BDA6-46c0-8950-9E722EDE34D7}\"\n"
"local guidUDPrepFunc    = \"{AD0D9949-2232-4505-B92C-7342216A6A8F}\"\n"
"local guidCFuncPointers = \"{49C97096-83FA-40d3-861B-6015CA9D41BD}\"\n"
"local guidLenFunc       = \"{771DD06F-92A2-4e23-8EEC-317F7E17A3D8}\"\n"
"local guidPushfString   = \"{CC38C278-8672-43a0-AFA4-9C2A90FC91B9}\"\n"
"local guidConcatFunc    = \"{3C0C3DEF-DC94-4043-9073-4B21E10419A3}\"\n"
"local guidLessThanFunc  = \"{9FFB88AB-5676-4345-85B8-B30EBB5C4CE2}\"\n"
"local guidToPtrFunc     = \"{6E540BD9-836B-4419-998F-97D6E21295AA}\"\n"
"local guidLPCall        = \"{84A25691-6B47-4b34-AC5D-19C1CB021C8A}\"\n"
"local guidLGSRefs       = \"{EF44B6B3-C150-4955-8337-5D57DEAB8303}\"\n"
"\n"
"local _R = _R\n"
"local weak_key_meta = {__mode = \"k\"}\n"
"local weak_val_meta = {__mode = \"v\"}\n"
"\n"
"--lua_pushlstring()'s function\n"
"do local gsub, sub = string.gsub, string.sub\n"
"if not _R[guidLPLS_AnonFunc] then _R[guidLPLS_AnonFunc] = function(InitialCopy, DiffCopy)\n"
"    local function subfunc(pos)\n"
"        return (sub(DiffCopy, pos, pos) == '1') and '\\0' or false\n"
"    end\n"
"    return gsub(InitialCopy, \"()\\1\", subfunc)\n"
"end end end\n"
"\n"
"--lua_pushfstring()'s function\n"
"do local ins, concat, fmt, type = table.insert, table.concat, string.format, type\n"
"local actions = {\n"
"    [\"string\"]  = function(pos, value, args, strings)\n"
"        ins(strings, value)\n"
"    end;\n"
"    [\"boolean\"] = function(pos, value, args, strings)\n"
"        return\n"
"    end;\n"
"    [\"number\"]  = function(pos, value, args, strings)\n"
"        if type(args[pos-1]) == \"boolean\" then\n"
"            ins(strings, fmt(\"%d\", value))\n"
"        else\n"
"            ins(strings, fmt(\"%f\", value))\n"
"        end\n"
"    end;\n"
"}\n"
"\n"
"if not _R[guidPushfString] then _R[guidPushfString] = function(...)\n"
"    local args = {...}\n"
"    local strings = {}\n"
"    for pos, value in ipairs(args) do actions[type(value)](pos, value, args, strings) end\n"
"    \n"
"    return concat(strings)\n"
"end end end\n"
"\n"
"--Full Userdata stuff\n"
"do local d_setmetatable = debug.setmetatable\n"
"\n"
"if not _R[guidUDAnchors] then _R[guidUDAnchors] = setmetatable({}, weak_key_meta) end\n"
"if not _R[guidUDSizes]   then _R[guidUDSizes]   = setmetatable({}, weak_key_meta) end\n"
"if not _R[guidUDEnvs]    then _R[guidUDEnvs]    = setmetatable({}, weak_key_meta) end\n"
"\n"
"udMeta.MetaName, udMeta.__metatable = \"userdata\", false\n"
"\n"
"--if not udAnch.__gc then udAnch.__gc = udGCFunc end\n"
"\n"
"local UDAnchors, UDSizes, UDEnvs = _R[guidUDAnchors], _R[guidUDSizes], _R[guidUDEnvs]\n"
"\n"
"if not _R[guidUDPrepFunc] then _R[guidUDPrepFunc] = function(udObj, udAnch, udSize, udEnv)\n"
"    UDAnchors[udObj] = udAnch\n"
"    UDSizes[udObj]   = udSize\n"
"    UDEnvs[udObj]    = udEnv\n"
"    \n"
"    return udObj\n"
"end end end\n"
"\n"
"--Minor object property/action stuff\n"
"do local concat, d_getmetatable, d_setmetatable = table.concat, debug.getmetatable, debug.setmetatable\n"
"local match, tonumber, tostring = string.match, tonumber, tostring\n"
"if not _R[guidLenFunc] then _R[guidLenFunc] = function(obj)\n"
"    return #obj\n"
"end end\n"
"\n"
"if not _R[guidLessThanFunc] then _R[guidLessThanFunc] = function(obj1, obj2)\n"
"    return obj1 < obj2\n"
"end end\n"
"\n"
"if not _R[guidConcatFunc] then _R[guidConcatFunc] = function(...)\n"
"    return concat({...})\n"
"end end\n"
"\n"
"if not _R[guidToPtrFunc] then _R[guidToPtrFunc] = function(obj)\n"
"    local mt = d_getmetatable(obj)\n"
"    if mt then d_setmetatable(obj, nil) end\n"
"    local retval = tonumber(match(tostring(obj), \"(%x+)$\"), 16)\n"
"    if mt then d_setmetatable(obj, mt) end\n"
"    return retval\n"
"end end end\n"
"\n"
"--lua_pcall()'s function\n"
"do local pcall, unpack = pcall, unpack\n"
"if not _R[guidLPCall] then _R[guidLPCall] = function(func, errfunc, ...)\n"
"    local res = {pcall(func, ...)}\n"
"    if res[1] == true then\n"
"        return 1, unpack(res, 2) --Function executed successfully\n"
"    else\n"
"        if not errfunc then\n"
"            return 2, res[2]     --Function errored, no error handler\n"
"        else\n"
"            res = {pcall(errfunc, res[2])}\n"
"            if res[1] == true then\n"
"                return 3, res[2] --Function errored, error handler ran successfully\n"
"            else\n"
"                return 4, res[2] --Function errored, error handler errored\n"
"            end\n"
"        end\n"
"    end\n"
"end end end\n"
"\n"
"--lua_getstack() references\n"
"if not _R[guidLGSRefs] then _R[guidLGSRefs] = setmetatable({}, weak_val_meta) end\n"
"\n"
"--Upvalue stuff\n"
"if not _R[guidUpvalues] then _R[guidUpvalues] = setmetatable({}, weak_key_meta) end\n"
"if not _R[guidCFuncPointers] then _R[guidCFuncPointers] = setmetatable({}, weak_key_meta) end\n"
"\n"
"return (\"luaopen_\"..(OrigRequireName:match(\"%-\") and OrigRequireName:match(\"%-(.*)\") or OrigRequireName):gsub(\"%.\", \"_\")),\n"
"       (function(udGCFunc)\n"
"            if not udAnch.__gc then udAnch.__gc = udGCFunc end\n"
"        end)\n"